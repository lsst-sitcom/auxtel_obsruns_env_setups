#!/usr/bin/env bash
# This script should be executed from a bare metal machine to clone
# the packages and write the file with the setup syntax 
# only authorized users can run this script
# run as:
# sudo -u obsenv bash /net/obs-env/repos/auxtel_obsruns_env_setups/bash/lsst/sitcom/2023/env_versioning_setup-obsrun-2023-04A.sh 

# set to exit when any command fails
set -e

# The packages will be cloned and installed in the following folder
# It is strongly recommended NOT to modify this
REPOS="/net/obs-env/auto_base_packages/"

# Declare where repos are from Nublado
NUBLADO_REPOS="/opt/obs_env/auto_base_packages/"

# Check if the directory exists
if [ -d $REPOS ]; then
  printf "Directory "$REPOS" exists. Remove directory and contents and re-run.\n"
  exit 1
fi

# Start cloning and setting up packages
printf 'Repositories will cloned and setup in the directory:'$REPOS"\n"
mkdir -v ${REPOS}

# Code below assumes that the branch exists already
# See package_branch_creation.sh if this needs to be done 

printf '\nCloning lsst-dm/atmospec \n'
cd $REPOS
git clone https://github.com/lsst-dm/atmospec.git
cd atmospec
git fetch --all
git pull

printf '\nCloning lsst-sitcom/summit_utils \n'
cd $REPOS
git clone https://github.com/lsst-sitcom/summit_utils.git
cd summit_utils
git fetch --all
git pull

printf '\nCloning lsst-sitcom/summit_extras \n'
# printf 'Failed tests are allowed for this package'
# Remove exit on failure
# set +e
cd $REPOS
git clone https://github.com/lsst-sitcom/summit_extras.git
cd summit_extras
git fetch --all
git pull

# set back to exit on failure
# set -e

printf '\nCloning lsst-ts/cwfs \n'
cd $REPOS
git clone https://github.com/lsst-ts/cwfs.git
cd cwfs
git fetch --all

printf '\nCloning lsst-ts/ts_wep \n'
cd $REPOS
git clone https://github.com/lsst-ts/ts_wep.git
cd cwfs
git fetch --all

printf '\nCloning lsst-ts/ts_observatory_control \n'
cd $REPOS
git clone https://github.com/lsst-ts/ts_observatory_control.git
cd ts_observatory_control
git fetch --all
git pull

printf '\nCloning lsst-ts/ts_externalscripts \n'
cd $REPOS
git clone https://github.com/lsst-ts/ts_externalscripts.git
cd ts_externalscripts
git fetch --all

printf '\nCloning lsst-ts/ts_observing_utilities \n'
cd $REPOS
git clone https://github.com/lsst-ts/ts_observing_utilities.git
cd ts_observing_utilities
git fetch --all

printf '\nCloning lsst-ts/ts_standardscripts \n'
cd $REPOS
git clone https://github.com/lsst-ts/ts_standardscripts.git
cd ts_standardscripts
git fetch --all

# Cloning completed

printf '\nCloning of packages completed \n'

# Create file that will be *sourced* at the beginning of .user_setups
# This file contains all the packages that require an eups setup
FILE_PATH=$REPOS"auto_env_setup.sh"
if [ -d $FILE_PATH ]; then
  printf "auto_env_setup.sh file already exists in "$REPOS". Removing. \n"
  rm -f $FILE_PATH
fi

printf "Creating a new auto_env_setup.sh in: ${REPOS} \n"

cat <<EOT >> $FILE_PATH
#!/usr/bin/env bash
# This file is auto generated by the package_setup_obsrun scripts.
# It is sourced by the ~/notebooks/.user_setups file
# Do not modify!

EOT

# printf "setup -j spectractor -r "$REPOS"Spectractor \n" >> $FILE_PATH
printf "setup -j summit_utils -r "$NUBLADO_REPOS"summit_utils \n" >> $FILE_PATH
printf "setup -j summit_extras -r "$NUBLADO_REPOS"summit_extras \n" >> $FILE_PATH
printf "setup -j atmospec -r "$NUBLADO_REPOS"atmospec \n" >> $FILE_PATH
printf "setup -j ts_externalscripts -r "$NUBLADO_REPOS"ts_externalscripts \n" >> $FILE_PATH
printf "setup -j ts_standardscripts -r "$NUBLADO_REPOS"ts_standardscripts \n" >> $FILE_PATH
printf "setup -j ts_observatory_control -r "$NUBLADO_REPOS"ts_observatory_control \n" >> $FILE_PATH
printf "setup -j ts_observing_utilities -r "$NUBLADO_REPOS"ts_observing_utilities \n" >> $FILE_PATH
printf "setup -j cwfs -r "$NUBLADO_REPOS"cwfs \n" >> $FILE_PATH
printf "setup -j ts_wep -r "$NUBLADO_REPOS"ts_wep \n" >> $FILE_PATH

printf '\nSetup file written as '$FILE_PATH' \n'

